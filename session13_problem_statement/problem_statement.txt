
Open In Colab
Time : 1 hour
Problem Statement
A student is taking a cryptography class and has found anagrams to be very useful. Two strings are anagrams of each other if the first string's letters can be rearranged to form the second string. In other words, both strings must contain the same exact letters in the same exact frequency. For example, bacdc and dcbac are anagrams, but bacdc and dcbad are not.
The student decides on an encryption scheme that involves two large strings. The encryption is dependent on the minimum number of character deletions required to make the two strings anagrams. You need to determine this number.
Given two strings, 
 and 
, that may or may not be of the same length, determine the minimum number of character deletions required to make 
 and 
 anagrams. Any characters can be deleted from either of the strings. The strings 
 and 
 consist of lowercase English alphabets.
Example

a = 'cde'

b = 'dcf' 

Delete 
 from 
 and 
 from 
 so that the remaining strings are 
 and 
 which are anagrams. This takes 2 character deletions.
Function Description
Create a makeAnagram function below.
Inputs:
string a: a string
string b: another string
Output:
int: the minimum total characters that must be deleted
Solution


     


     